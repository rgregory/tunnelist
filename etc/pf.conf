## Tunnelist pf.conf


# macros
ext  		= "em0"
vpn_ports 	= "{ 21 22 23 25 53 110 113 123 443 548 587 993 }"
admin_net 	= "{ 173.48.0.0/12, 72.192.0.0/16 }"
admin_ports 	= "{ 9100 }"

# tables
table <problems> persist file "/usr/local/services/tunnelist/problem_addresses"
table <badhosts> persist file "/usr/local/services/tunnelist/bad_hosts"
table <tor> persist file "/usr/local/services/tunnelist/tor_nodes"

# data from http://rules.emergingthreats.net/fwrules/emerging-Block-IPs.txt
table <threats> persist file "/usr/local/services/tunnelist/threats"
table <sshguard> persist

# options
set block-policy drop
set optimization aggressive
set timeout interval 10
set timeout frag 30
set loginterface $ext

# scrubby
scrub fragment reassemble \
	random-id \
	max-mss 1500 \
	set-tos throughput \
	reassemble tcp 

# queues
altq on $ext cbq bandwidth 100Mb queue { admin, vpn }
  queue admin bandwidth 90% priority 1 cbq(default)
  queue vpn bandwidth 10% priority 5 cbq(borrow red)

# default
block log

# VPN clients should be limited to what sort of services
# they can connect to on localhost.
#
pass quick inet proto { tcp, udp } from 127.0.0.1 to 127.0.0.1 port 53 user { > 2000 } 
block log quick from 127.0.0.1 to 127.0.0.1 user { > 2000 } 
block log quick on l0 user { > 2000 }
block quick on $ext inet proto { ! tcp, udp, icmp }

# other localhost traffic should pass
#
pass quick on l0
antispoof for $ext

# sanity
block in quick from { <problems> } to any label problem_hosts
block in quick from { <sshguard> } label "SSH Guard"
block in quick from { <badhosts> } to any label bad_hosts
block in quick from { <tor> } label tor
block in quick to { <tor> } label tor
block in quick log from <threats> to any label threats
block in quick proto tcp flags FUP/WEUAPRSF
block in quick proto tcp flags WEUAPRSF/WEUAPRSF
block in quick proto tcp flags SRAFU/WEUAPRSF
block in quick proto tcp flags /WEUAPRSF
block in quick proto tcp flags SR/SR
block in quick proto tcp flags SF/SF

# icmp
pass quick inet proto icmp all icmp-type 8 code 0  keep state label icmp
pass quick inet proto icmp all icmp-type 3 code 4  keep state label icmp
pass quick inet proto icmp all icmp-type 11        keep state label icmp
block drop quick inet proto icmp all icmp-type { 13, 14 }


## local allowances
pass out on $ext proto { tcp, udp } to port 53 \
  user = dnscache \
  keep state \
  queue admin \
  label admin

## customer filters
pass in on $ext proto tcp to port $vpn_ports flags S/SA modulate state \
	(max 5000, \
	source-track rule, \
	max-src-conn-rate 20/5, \
	overload <problems> flush, \
	max-src-states 3) \
	label vpn \
	queue vpn

# VPN daemon can connect lots of ports
#
# We're encouraging folks to use Tunnelist as a SOCKS server,
# so the inbound user will need to establish connections to arbitrary
# ports.
#
pass out on $ext proto tcp to any user { > 2000 } modulate state \
  label vpn \
  queue vpn

## admin filters
# 
# Inbound admin connections flow to sep. bandwidth queue
#
pass in on $ext proto tcp from $admin_net to port $admin_ports \
	modulate state \
	label admin \
	queue admin

## outbound for administration
pass out on $ext proto { tcp, udp } to any user { < 1000, 1001, 1002 }  keep state \
  label admin \
  queue admin
